function [xUPO, period] = KS_UPO(sequence)

% Function for producing UPOs in the 28-mode truncation of the Kuramoto- 
% Sivashinsky flow with nu = 0.0298. This code is associated to the work of 
% Section 5.1 of Deep Learning of Conjugate Mappings by Jason J. Bramburger, 
% Steven L. Brunton, and J. Nathan Kutz (2021). UPOs are initialized using 
% the method presented in Section 2.3 from a 14 mode truncation of the 
% system. The remaining 14 modes are initialized to be zero.
%
% Inputs:   - Sequences of L's and R's 
%               - Acceptable sequences are listed in Table 3 in Section 5.1
%               - Default sequence is R
%               - Invalid inputs are changed to the default
% 
% Outputs:  - xUPO: 28 column matrix containing the x_k(t), k = 1,...,28, 
%               components of the UPO.
%           - period: the temporal period of the UPO

% Model parameters 
nu = 0.0298; 
m = 14; % dimension of the ODE

% Galerkin projection trajectory
dt = 0.005; %0.005;
tspan = 0:dt:10;
options = odeset('RelTol',1e-12,'AbsTol',1e-12*ones(1,m));

% Set default input
if nargin == 0 
    sequence = 'R';
end

% Initial conditions in Poincare section
if strcmp(sequence,'R') == 1
    % R periodic orbit (fixed point in map)
    x0(1,:) = [0; -0.04844569;  2.70798922; -5.87806034; -5.52487087; -5.84515667; 1.6005652;  -0.0869582;  -0.56230301; -1.33457804; -0.40355656; -0.10424331; 0.08466411; -0.08420601];
elseif strcmp(sequence,'LR') == 1
    % LR periodic orbit
    x0(1,:) = [0; 0.08551259;  2.5645885;  -4.8659296;  -4.9145336;  -6.1757355;   1.1352578; 0.12686613; -0.23454644; -1.1219724;  -0.44690222; -0.16513911;  0.09102526; -0.03672571];
    x0(2,:) = [0; -0.04002827;  2.7162838;  -6.33816;    -5.692865;   -5.5115533;   1.8434482; -0.21337736; -0.7358255;  -1.4064654;  -0.34863168; -0.0605914;   0.08013324; -0.10712482];
elseif strcmp(sequence,'LLR') == 1
    % LLR periodic orbit
    x0(1,:) = [0; 0.32011423;  2.3376563;  -4.608943;   -4.341391;   -5.872214;    1.0165215; 0.13462274; -0.16655391; -0.9646475;  -0.37186468; -0.14970955;  0.08743497; -0.01903655];
    x0(2,:) = [0; 0.04155741;  2.6090553;  -5.005123;   -5.045593;   -6.169898;    1.2013471; 0.10585572; -0.2752807;  -1.1610992;  -0.4489753;  -0.1576402;   0.09363911; -0.04094945];
    x0(3,:) = [0; -0.02630738;  2.7140524;  -6.523664;   -5.7473907;  -5.3263645;   1.9560406; -0.26956618; -0.8119399;  -1.4313859;  -0.3170318;  -0.0362979;   0.08087678; -0.11443662];
elseif strcmp(sequence,'LRR') == 1
    % LRR periodic orbit
    x0(1,:) = [0; 0.24057786;  2.420474;   -4.6414113;  -4.5263257;  -6.00789;     1.038741; 0.14669493; -0.17117243; -1.0107841;  -0.40076157; -0.15661637;  0.09176508;-0.02080705];
    x0(2,:) = [0; -0.02687391;  2.679326;   -5.44845;    -5.3270106;  -6.0511637;   1.3996857; 0.01655612; -0.4149401;  -1.2573974;  -0.43514287; -0.1334434;   0.0909771; -0.06154571];
    x0(3,:) = [0; -0.02944705;  2.7150137;  -6.471224;   -5.7304993;  -5.375458;    1.9257271; -0.25322753; -0.7900699;  -1.4234228;  -0.32475722; -0.04203664;  0.08156563; -0.11150416];
elseif strcmp(sequence,'LLLR') == 1
    % LLLR periodic orbit
    x0(1,:) = [0; 0.43955642;  2.1956697;  -4.618267;   -4.059551;   -5.607651;    0.9993503; 0.09618264; -0.18310733; -0.9016208;  -0.32403788; -0.13832879;  0.07521936; -0.02263081];
    x0(2,:) = [0; 0.29294708;  2.3667762;  -4.615873;   -4.4043865;  -5.9221025;   1.0227963; 0.14000729; -0.16660975; -0.979939;   -0.38206297; -0.15220979;  0.08920091; -0.01929232];
    x0(3,:) = [0; 0.01113938;  2.6385787;  -5.1470942;  -5.1511397;  -6.1481056;   1.2634928; 0.07946146; -0.31884488; -1.1957872;  -0.44834027; -0.15143576;  0.09286979; -0.04774347];
    x0(4,:) = [0; -0.02205275;  2.7125278;  -6.58881;    -5.768084;   -5.2630925;   1.9942447; -0.29025504; -0.83954835; -1.4412799;  -0.30716962; -0.02902536;  0.07998227; -0.11815349];
elseif strcmp(sequence,'LRRR') == 1
    % LRRR periodic orbit
    x0(1,:) = [0; -3.3011686e-02;  2.6870370e+00; -5.5308166e+00; -5.3678741e+00; -6.0155306e+00;  1.4381411e+00; -1.9945153e-03; -4.4214395e-01; -1.2724862e+00; -4.2952603e-01; -1.2765467e-01;  9.0414278e-02; -6.5279253e-02];
    x0(2,:) = [0; -3.3787701e-02;  2.7160368e+00; -6.3901830e+00; -5.7039466e+00; -5.4482179e+00;  1.8796204e+00; -2.2851206e-01; -7.5686824e-01; -1.4111048e+00; -3.3632499e-01; -5.0708968e-02;  8.2578488e-02; -1.0707094e-01];
    x0(3,:) = [0; 1.4427388e-01;  2.5132148e+00; -4.7451506e+00; -4.7590208e+00; -6.1266909e+00;  1.0882406e+00;  1.4399490e-01; -1.9861129e-01; -1.0742388e+00; -4.3046853e-01; -1.6189598e-01;  9.4070062e-02; -2.7178815e-02];
    x0(4,:) = [0; -4.4998005e-02;  2.7133715e+00; -6.0270319e+00; -5.5766144e+00; -5.7315054e+00;  1.6832252e+00; -1.2522964e-01; -6.1622190e-01; -1.3551255e+00; -3.8256499e-01; -8.6637728e-02;  8.6438775e-02; -8.8464051e-02];
elseif strcmp(sequence,'LLRR') == 1
    % LLRR periodic orbit
    x0(1,:) = [0; 4.34278250e-01;  2.20253372e+00; -4.61668205e+00; -4.07234049e+00; -5.62101793e+00;  9.99862134e-01;  9.83991772e-02; -1.81813061e-01; -9.04289126e-01; -3.26236069e-01; -1.38816267e-01;  7.59405494e-02; -2.22911481e-02];
    x0(2,:) = [0; 2.77070165e-01;  2.38337040e+00; -4.62181377e+00; -4.44123077e+00; -5.94956255e+00;  1.02704227e+00;  1.42560914e-01; -1.67348742e-01; -9.89085257e-01; -3.87875199e-01; -1.53614566e-01;  9.00882930e-02; -1.96120460e-02];
    x0(3,:) = [0; -3.04581923e-03;  2.65299344e+00; -5.23536110e+00; -5.20801258e+00; -6.12582970e+00;  1.30271149e+00;  6.19044565e-02; -3.46462756e-01; -1.21515727e+00; -4.45873231e-01; -1.46753460e-01;  9.23438519e-02; -5.18400222e-02];
    x0(4,:) = [0; -2.22334694e-02;  2.71259856e+00; -6.58617115e+00; -5.76725245e+00; -5.26570606e+00;  1.99268591e+00; -2.89408386e-01; -8.38420987e-01; -1.44087923e+00; -3.07575345e-01; -2.93225795e-02;  8.00190121e-02; -1.18001536e-01];
elseif strcmp(sequence,'LLRRR') == 1
    % LLRRR periodic orbit
    x0(1,:) = [0; 0.37400472;  2.2767522;  -4.6058517;  -4.2157693;  -5.7622857;   1.0070711; 0.1202618;  -0.1707147;  -0.93546456; -0.35082138; -0.14455202;  0.08291145; -0.01965349];
    x0(2,:) = [0; 0.5170;   2.5277927;  -4.7715836;  -4.7988553;  -6.1402636;   1.099961; 0.14122522; -0.20613605; -1.085718;   -0.43446285; -0.16217169;  0.09419011; -0.02870407];
    x0(3,:) = [0; -0.04357728;  2.7151673;  -6.116121;   -5.609324;   -5.668159;    1.7299485; -0.14948682; -0.64957386; -1.369049;   -0.37208328; -0.07826746;  0.08558287; -0.09286039];
    x0(4,:) = [0; -0.01481068;  2.665524;   -5.326424;   -5.2615767;  -6.0972347;   1.3437322; 0.04300975; -0.37540326; -1.2338717;  -0.44202718; -0.14138316;  0.09177562; -0.05600679];
    x0(5,:) = [0; -0.0243338;   2.7133746;  -6.5546193;  -5.757264;   -5.2966223;   1.9741195; -0.27934223; -0.82499707; -1.4360865;  -0.31238168; -0.03286172;  0.08045751; -0.11619273];
elseif strcmp(sequence,'LRRLR') == 1
    % LRRLR periodic orbit
    x0(1,:) = [0; 0.21319582;  2.447496;   -4.6623096;  -4.5909076;  -6.047131;    1.049642; 0.14809729; -0.17616619; -1.027787;   -0.40992808; -0.15859011;  0.09271413; -0.02212979];
    x0(2,:) = [0; -0.03778927;  2.6936767;  -5.613758;   -5.4068003;  -5.9761972;   1.4774598; -0.02122546; -0.46998742; -1.2871641;  -0.4231678;  -0.12150721;  0.08982525; -0.06905282];
    x0(3,:) = [0; -0.03829256;  2.716506;   -6.2893825;  -5.670078;   -5.5336666;   1.823482; -0.19864804; -0.7165409;  -1.3957332;  -0.35008395; -0.0611612;   0.08375512; -0.10171217];
    x0(4,:) = [0; 0.06147394;  2.5902734;  -4.9345264;  -4.983919;   -6.1722064;   1.1707485; 0.11790939; -0.25401068; -1.1415384;  -0.44724596; -0.1599476;   0.09395584; -0.03742896];
    x0(5,:) = [0; -0.03060972;  2.715327;   -6.450626;   -5.723804;   -5.3943024;   1.9139227; -0.24688482; -0.78156334; -1.4202942;  -0.32774025; -0.04426371;  0.08182882; -0.1103657];
elseif strcmp(sequence,'LLLLR') == 1
    % LLLLR periodic orbit
    x0(1,:) = [0; 0.18689798;  2.4729023;  -4.6882434;  -4.6538877;  -6.080931;    1.0622252; 0.14792624; -0.18290311; -1.0448155;  -0.41824594; -0.16018087;  0.09339729; -0.02375431];
    x0(2,:) = [0; -0.04356161;  2.7037144;  -5.7734904;  -5.4765935;  -5.8911285;   1.5549645; -0.05979744; -0.5249567;  -1.3142782;  -0.40913397; -0.10883189;  0.0886153; -0.0764024];
    x0(3,:) = [0; -0.04480532;  2.7137616;  -6.043498;   -5.582744;   -5.7200847;   1.691795; -0.12966144; -0.6223332;  -1.3577123;  -0.38067088; -0.08511276;  0.08628482; -0.08926927];
    x0(4,:) = [0; -0.03041974;  2.6836953;  -5.493581;   -5.3496943;  -6.032071;    1.4206862; 0.00645907; -0.42979264; -1.2657341;  -0.43215516; -0.13031256;  0.09067248; -0.06359022];
    x0(5,:) = [0; -0.03177596;  2.7156157;  -6.4292135;  -5.7168036;  -5.4136386;   1.9017149; -0.2403349;  -0.7727699;  -1.4170406;  -0.33081084; -0.04656257;  0.08209869; -0.10919135];
elseif strcmp(sequence,'LLRLR') == 1
    % LLRLR periodic orbit
    x0(1,:) = [0; 0.3618918;   2.2908444;  -4.6054125;  -4.2441497;  -5.788292;    1.0089009; 0.12391245; -0.16929996; -0.94190425; -0.35563567; -0.14572196;  0.08405718; -0.01937948];
    x0(2,:) = [0; 0.10565691;  2.5491698;  -4.8172674;  -4.8593097;  -6.156574;   1.1199577; 0.13557278; -0.21934271; -1.1034956;  -0.43975368; -0.16212739;  0.09424637; -0.03125785];
    x0(3,:) = [0; -0.04007744;  2.7164109;  -6.2413487;  -5.6535797;  -5.5724874;   1.7971843; -0.18475123; -0.6976866;  -1.3883761;  -0.35639304; -0.06601312;  0.08428462; -0.09921535];
    x0(4,:) = [0; 0.03335932;  2.6168864;  -5.038625;   -5.07243;    -6.166592;    1.2159255; 0.09986106; -0.28546605; -1.1697707;  -0.4492657;  -0.15634665;  0.09346821; -0.04258237];
    x0(5,:) = [0; -0.02476987;  2.713526;   -6.547918;   -5.7551303;  -5.303111;    1.9701912; -0.27721825; -0.8221603;  -1.4350686;  -0.3133947;  -0.03360883;  0.08054823; -0.11581006];
else
    fprintf('Not an acceptable sequence. Sequence set to R. \n')
    % Default periodic orbit
    x0(1,:) = [0; -0.04844569;  2.70798922; -5.87806034; -5.52487087; -5.84515667; 1.6005652;  -0.0869582;  -0.56230301; -1.33457804; -0.40355656; -0.10424331; 0.08466411; -0.08420601];
end

% Create initial guess
perMap = length(x0(:,1)); % period of UPO in Poincare map
init = [];

for p = 1:perMap

    % Initialize trajectory
    [~,sol] = ode45(@(t,x) Kuramoto(x,nu,m),tspan,x0(p,:),options);

    ind = 0;
    for j = 1:length(sol(:,1))-1
       if  (sol(j,1) < 0) && (sol(j+1,1) >= 0) % Poincare section  
            if abs(sol(j,1)) <= abs(sol(j+1,1))
                ind = j;
            else
               ind = j+1; 
            end

            init = [init; sol(1:ind,:)];

            break
        end 
    end

end

% Root-finding Algorithm
tic % start timer

T = dt*length(init(:,1)); % Initial guess for period
N = length(init(:,1));

% Time derivative
D = sparse(1:N-1,[2:N-1 N],ones(N-1,1)/2,N,N);
D(N,1) = 0.5; % Periodic BCs
D = (D - D')/dt;

modes = 2*m; % Double the number of modes
xinit = [init zeros(N,modes - m)];
xinit = reshape(xinit,N*modes,1);
xinit = [xinit; T];

% fsolve options
options=optimset('Display','iter','Jacobian','on','MaxIter',10000,'Algorithm','levenberg-marquardt','TolFun',1e-15,'TolX',1e-15);

% call fsolve
xNew = fsolve(@(u) Periodic(u,D,xinit,nu,N,modes),xinit,options);

toc % end timer

% Recover solutions
xUPO = reshape(xNew(1:end-1),N,modes);
period = tspan(N)/xNew(end);

% Plot some of the periodic Fourier coefficients
figure(4)
plot([xUPO(:,1); xUPO(:,1)],[xUPO(:,2); xUPO(:,2)],'b','Linewidth',2)
xlabel('x_1'); ylabel('x_2')
set(gca,'Fontsize',16)


end

%% K-S right-hand-side

function dx = Kuramoto(x,nu,modes)

   for k = 1:modes
      
      dx(k,1) = (k^2)*(1-nu*k^2)*x(k);
      
      for n = 1:(modes - k)
          dx(k,1) = dx(k,1) + 0.5*k*x(n)*x(n+k);
      end
      
      for m = 1:(k-1)
         dx(k,1) = dx(k,1) - 0.25*k*x(m)*x(k-m); 
      end
      
   end

end


%% Function whose roots are periodic orbits

function [F,J] = Periodic(uin,D,uinit,nu,N,modes) %Periodic(uin,Dtime,Dx,L,uinit,tdim,xdim)
    
    % reshape and gather data
    u = reshape(uin(1:end-1),N,modes);
    uinit = reshape(uinit(1:end-1),N,modes);
    T = uin(end);

    % Initializations
    final_row = 0;
    F = zeros(N,modes);
    J = sparse(N*modes+1,N*modes+1); 
    
    for k = 1:modes
        
        F(1:N,k) = D*u(:,k) - T*(k^2)*(1-nu*k^2)*u(:,k);
        J((k-1)*N+1:k*N, (k-1)*N+1:k*N) = D - speye(N,N)*T*(k^2)*(1-nu*k^2);
        J((k-1)*N+1:k*N,end) = - (k^2)*(1-nu*k^2)*u(:,k);
        
        for j = 1:(modes - k)
            F(1:N,k) = F(1:N,k) - T*0.5*k*u(:,j).*u(:,j+k);
            J((k-1)*N+1:k*N, (j-1)*N+1:j*N) = J((k-1)*N+1:k*N, (j-1)*N+1:j*N) -T*0.5*k*spdiags(u(:,j+k),0,N,N);
            J((k-1)*N+1:k*N, (j+k-1)*N+1:(j+k)*N) = J((k-1)*N+1:k*N, (j+k-1)*N+1:(j+k)*N) -T*0.5*k*spdiags(u(:,j),0,N,N);
            J((k-1)*N+1:k*N,end) = J((k-1)*N+1:k*N,end) - 0.5*k*u(:,j).*u(:,j+k); 
        end
      
        for jj = 1:(k-1)
            F(1:N,k) = F(1:N,k) + T*0.25*k*u(:,jj).*u(:,k-jj); 
            J((k-1)*N+1:k*N, (jj-1)*N+1:jj*N) = J((k-1)*N+1:k*N, (jj-1)*N+1:jj*N) + T*0.25*k*spdiags(u(:,k-jj),0,N,N);
            J((k-1)*N+1:k*N, (k-jj-1)*N+1:(k-jj)*N) = J((k-1)*N+1:k*N, (k-jj-1)*N+1:(k-jj)*N) + T*0.25*k*spdiags(u(:,jj),0,N,N);
            J((k-1)*N+1:k*N,end) = J((k-1)*N+1:k*N,end) + 0.25*k*u(:,jj).*u(:,k-jj);
        end
        
        % Last row
        final_row = final_row + dot(D*uinit(:,k),uinit(:,k)-u(:,k));
        J(end,(k-1)*N+1:k*N) = -D*uinit(:,k);
        
    end

    F = reshape(F,N*modes,1);
    
    F(N*modes+1,1) = final_row; 

end

